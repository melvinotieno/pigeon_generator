import 'package:path/path.dart' show normalize;

/// Configuration for the output file generated by Pigeon.
class OutputConfig {
  OutputConfig._internal(
    String path, {
    required this.extension,
    this.pascalCase = false,
    this.append,
  }) : path = normalize(path.trim());

  /// The path to the output directory.
  final String path;

  /// The extension of the generated file.
  final String extension;

  /// Whether to use PascalCase for the generated file name.
  final bool pascalCase;

  /// The string to append to the name of the generated file.
  final String? append;

  /// Returns [OutputConfig] from the given options.
  ///
  /// Parameters:
  /// - [path]: The path to the output directory (nullable)
  /// - [extension]: The file extension for the generated file
  /// - [pascalCase]: Whether to use PascalCase for the generated file name
  /// - [append]: Optional string to append to the name of the generated file
  ///
  /// Returns:
  /// - `null` if [path] is null
  /// - An [OutputConfig] instance with the provided values
  ///
  /// Example:
  /// ```dart
  /// final config = OutputConfig.fromOptions(
  ///   '/output/dir',
  ///   extension: '.dart',
  ///   pascalCase: true,
  ///   append: '_test',
  /// );
  static OutputConfig? fromOptions(
    String? path, {
    required String extension,
    bool pascalCase = false,
    String? append,
  }) {
    if (path == null) return null;

    return OutputConfig._internal(
      path,
      extension: extension,
      pascalCase: pascalCase,
      append: append,
    );
  }
}

extension StringExtension on String {
  /// Converts the string to PascalCase.
  String get pascalCase {
    final trimmed = replaceAll(RegExp(r'^[_-]+|[_-]+$'), '');
    final regex = RegExp(r'([_-][a-z])|(^[a-z])');

    // Apply transformation, removing underscores and hyphens.
    return trimmed.replaceAllMapped(regex, (Match match) {
      return match[0]!.replaceAll(RegExp(r'[_-]'), '').toUpperCase();
    });
  }

  /// Capitalizes the first letter of the string.
  String capitalize() {
    if (isEmpty) return this; // For an empty string, return as is.

    return '${this[0].toUpperCase()}${substring(1)}';
  }

  /// Applies a transformation function to the string.
  ///
  /// Parameters:
  /// - [transform]: A function that returns a transformed string
  ///
  /// Returns:
  /// - The result of applying [transform] to this string
  String let(String Function(String) transform) {
    return transform(this);
  }
}
